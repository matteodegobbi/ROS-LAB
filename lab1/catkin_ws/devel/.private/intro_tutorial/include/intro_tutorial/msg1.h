// Generated by gencpp from file intro_tutorial/msg1.msg
// DO NOT EDIT!


#ifndef INTRO_TUTORIAL_MESSAGE_MSG1_H
#define INTRO_TUTORIAL_MESSAGE_MSG1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace intro_tutorial
{
template <class ContainerAllocator>
struct msg1_
{
  typedef msg1_<ContainerAllocator> Type;

  msg1_()
    : roomID(0)
    , name()
    , battery_level(0.0)  {
    }
  msg1_(const ContainerAllocator& _alloc)
    : roomID(0)
    , name(_alloc)
    , battery_level(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _roomID_type;
  _roomID_type roomID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef float _battery_level_type;
  _battery_level_type battery_level;





  typedef boost::shared_ptr< ::intro_tutorial::msg1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::intro_tutorial::msg1_<ContainerAllocator> const> ConstPtr;

}; // struct msg1_

typedef ::intro_tutorial::msg1_<std::allocator<void> > msg1;

typedef boost::shared_ptr< ::intro_tutorial::msg1 > msg1Ptr;
typedef boost::shared_ptr< ::intro_tutorial::msg1 const> msg1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::intro_tutorial::msg1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::intro_tutorial::msg1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::intro_tutorial::msg1_<ContainerAllocator1> & lhs, const ::intro_tutorial::msg1_<ContainerAllocator2> & rhs)
{
  return lhs.roomID == rhs.roomID &&
    lhs.name == rhs.name &&
    lhs.battery_level == rhs.battery_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::intro_tutorial::msg1_<ContainerAllocator1> & lhs, const ::intro_tutorial::msg1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace intro_tutorial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::intro_tutorial::msg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intro_tutorial::msg1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intro_tutorial::msg1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intro_tutorial::msg1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intro_tutorial::msg1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intro_tutorial::msg1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::intro_tutorial::msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70735a3b61e646962f4ebd292be7dcd7";
  }

  static const char* value(const ::intro_tutorial::msg1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70735a3b61e64696ULL;
  static const uint64_t static_value2 = 0x2f4ebd292be7dcd7ULL;
};

template<class ContainerAllocator>
struct DataType< ::intro_tutorial::msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intro_tutorial/msg1";
  }

  static const char* value(const ::intro_tutorial::msg1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::intro_tutorial::msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 roomID\n"
"string name\n"
"float32 battery_level\n"
;
  }

  static const char* value(const ::intro_tutorial::msg1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::intro_tutorial::msg1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roomID);
      stream.next(m.name);
      stream.next(m.battery_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msg1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::intro_tutorial::msg1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::intro_tutorial::msg1_<ContainerAllocator>& v)
  {
    s << indent << "roomID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roomID);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "battery_level: ";
    Printer<float>::stream(s, indent + "  ", v.battery_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTRO_TUTORIAL_MESSAGE_MSG1_H
